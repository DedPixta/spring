CREATE SCHEMA IF NOT EXISTS spring;

DROP TABLE IF EXISTS spring.person;

CREATE TABLE spring.person
(
    id    int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name  varchar NOT NULL,
    age   int CHECK ( person.age > 0 ),
    email varchar UNIQUE
);

INSERT INTO
    spring.person(name, age, email)
VALUES
    ('Tom', 23, 'tomy@mail.ru'),
    ('Andrii', 32, 'andro@mail.ru'),
    ('Mariya', 19, 'masha@yahoo.com'),
    ('Olesya', 46, 'olol@gmail.com.ru');


DROP TABLE IF EXISTS spring.director;

CREATE TABLE spring.director
(
    ditector_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        varchar(100) NOT NULL UNIQUE,
    age         int CHECK ( director.age > 10 )
);

DROP TABLE IF EXISTS spring.movie;

CREATE TABLE spring.movie
(
    movie_id           int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    director_id        int          NOT NULL REFERENCES spring.director (ditector_id),
    name               varchar(200) NOT NULL,
    year_of_production int CHECK ( movie.year_of_production > 1900 )
);

INSERT INTO
    spring.director(name, age)
VALUES
    ('Quentin Tarantino', 57),
    ('Martin Scorsese', 78),
    ('Guy Ritchie', 52),
    ('Woody Allen', 85),
    ('David Lynch', 74),
    ('Christopher Nolan', 50);

INSERT INTO
    spring.movie(director_id, name, year_of_production)
VALUES
    (1, 'Reservoir Dogs', 1992),
    (1, 'Pulp Fiction', 1994),
    (1, 'The Hateful Eight', 2015),
    (1, 'Once Upon a Time in Hollywood', 2019),
    (2, 'Taxi Driver', 1976),
    (2, 'Goodfellas', 1990),
    (2, 'The Wolf of Wall Street', 2013),
    (3, 'Lock, Stock and Two Smoking Barrels', 1998),
    (3, 'Snatch', 2000),
    (4, 'Midnight in Paris', 2011),
    (6, 'Inception', 2010);

DROP TABLE IF EXISTS spring.citizen;

CREATE TABLE spring.citizen
(
    citizen_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name       varchar(100) NOT NULL,
    age        int CHECK ( citizen.age > 0 )
);

DROP TABLE IF EXISTS spring.passport;

CREATE TABLE spring.passport
(
    citizen_id      int PRIMARY KEY REFERENCES spring.citizen (citizen_id),
    passport_number int
);

INSERT INTO
    spring.citizen(name, age)
VALUES
    ('Bob', 12),
    ('Tom', 24),
    ('Katy', 39),
    ('Alice', 45);

INSERT INTO
    spring.passport(citizen_id, passport_number)
VALUES
    (1, 12345),
    (2, 75124),
    (3, 91245),
    (4, 19259);

DROP TABLE IF EXISTS spring.actor;

CREATE TABLE spring.actor
(
    actor_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     varchar(100) NOT NULL UNIQUE,
    age      int CHECK ( actor.age > 0 )
);

INSERT INTO
    spring.actor(name, age)
VALUES
    ('Harvey Keitel', 81),
    ('Robert De Niro', 77),
    ('Leonardo DiCaprio', 46),
    ('Jason Statham', 53),
    ('Joe Pesci', 77),
    ('Samuel L. Jackson', 72);

DROP TABLE IF EXISTS spring.actor_movie;

CREATE TABLE spring.actor_movie
(
    actor_id int REFERENCES spring.actor (actor_id),
    movie_id int REFERENCES spring.movie (movie_id),
    PRIMARY KEY (actor_id, movie_id)
);

INSERT INTO
    spring.actor_movie
VALUES
    (1,1),
    (1,2),
    (2,5),
    (2,6),
    (3,4),
    (3,7),
    (3,11),
    (4,8),
    (4,9),
    (5,6),
    (6,2),
    (6,3);